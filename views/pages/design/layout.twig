{# DO NOT EDIT. This file was compiled from Markdown; please edit the source .md
file and run the gulp process to compile (either `gulp` or `npm run dev` from
the terminal). #}
{% extends "@tch/base.twig" %}
{% block lede %}Layout is the arrangement, sizing, and spacing of elements on a page. The Design System provides utilities for implementing layouts in a consistent and responsive manner.{% endblock %}
{% block body %}
<h2 id="content-wrapper">Content wrapper</h2>
<p>Content wrappers include the <a href="/content/main"><code>main</code> element</a>, the <a href="/components/section">Section</a> component, and anything with a <code>.max-width</code> utility class.</p>
<p>These content wrappers have a base width of 100% of the parent container, minus on either side a <code>--site-outer-gutter</code>, which is set to an <a href="#size-and-space"><code>x-loose</code> spacing</a>.</p>
<p>Content wrappers are centered and constrained to a maximum width of <code>--site-container-max-width</code>, which is set to 1200px (the <a href="#breakpoints"><code>x-large</code> breakpoint</a>).</p>
<h2 id="grid">Grid</h2>
<p>The Design System provides <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout">CSS Grid</a>-based utility classes for creating responsive layouts.</p>
<table>
  <thead>
    <tr>
      <th>Class</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>.grid</code></td>
      <td>Creates a grid container, 12 columns by default. When the child grid items add up to the total number of columns, a new row is automatically created.</td>
    </tr>
    <tr>
      <td><code>.column-x</code></td>
      <td>Creates a grid item spanning <code>x</code> number of columns (<code>1</code> through <code>12</code>). If you want an item to span the full row, you can set <code>x</code> to <code>12</code> or <code>full</code>.</td>
    </tr>
    <tr>
      <td style="white-space: nowrap"><code>.above-x:column-y</code></td>
      <td>Sets <code>y</code> number of columns above <code>x</code> <a href="#breakpoints">breakpoint token</a>.</td>
    </tr>
  </tbody>
</table>

<style>
  .grid--example > div {
    background: var(--tcds-color-blue-x-light);
    padding: 1rem;
    border-radius: 10px;
    text-align: center;
    font-family: var(--tcds-font-ui);
  }
</style>


{% embed "@tch/includes/example.twig" %}
{% block content %}
<p><small>Resize the window to see responsive changes to the column spans.</small></p>

<div class="grid grid--example gap-normal">
  <div class="column-full above-medium:column-6 above-large:column-3">
    <span class="hide-above-medium">12/12</span>
    <span class="hide-below-medium hide-above-large">6/12</span>
    <span class="hide-below-large">3/12</span>
  </div>
  <div class="column-full above-medium:column-6 above-large:column-9">
    <span class="hide-above-medium">12/12</span>
    <span class="hide-below-medium hide-above-large">6/12</span>
    <span class="hide-below-large">9/12</span>
  </div>
  <div class="column-full above-large:column-6">
    <span class="hide-above-large">12/12</span>
    <span class="hide-below-large">6/12</span>
  </div>
  <div class="column-full above-large:column-6">
    <span class="hide-above-large">12/12</span>
    <span class="hide-below-large">6/12</span>
  </div>
</div>
{% endblock %}
{% block code %}
<div class="grid">
  <div class="column-full above-medium:column-6 above-large:column-3">
    ...
  </div>
  <div class="column-full above-medium:column-6 above-large:column-9">
    ...
  </div>
  <div class="column-full above-large:column-6">
    ...
  </div>
  <div class="column-full above-large:column-6">
    ...
  </div>
</div>
{% endblock %}
{% endembed %}


<p>If you want grid items to fill whatever available cell is created by the grid container, you can set custom properties on the <code>.grid</code> container.</p>
<table>
  <thead>
    <tr>
      <th>Custom property</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--grid-columns-default</code></td>
      <td>The default number of columns in the grid container.</td>
    </tr>
    <tr>
      <td><code>--above-x-grid-columns</code></td>
      <td>The number of columns in the grid container above <code>x</code> breakpoint token.</td>
    </tr>
  </tbody>
</table>


{% embed "@tch/includes/example.twig" %}
{% block content %}
<p><small>Resize the window to see responsive changes to the grid column count.</small></p>

<div class="grid grid--example gap-normal" style="
  --grid-columns-default: 2;
  --above-medium-grid-columns: 4;
  --above-large-grid-columns: 6;
">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
  <div>7</div>
  <div>8</div>
  <div>9</div>
</div>
{% endblock %}
{% block code %}
<div class="grid" style="
  --grid-columns-default: 2;
  --above-medium-grid-columns: 4;
  --above-large-grid-columns: 6;
">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
  <div>7</div>
  <div>8</div>
  <div>9</div>
</div>
{% endblock %}
{% endembed %}


<p>This allows you to avoid having to add any classes on the child items, with the grid specifications instead determined solely on the container.</p>
<p>You can also combine both approaches:</p>

{% embed "@tch/includes/example.twig" %}
{% block content %}
<p><small>Resize the window to see responsive changes to the grid column count.</small></p>

<div class="grid grid--example gap-normal" style="
  --grid-columns-default: 2;
  --above-medium-grid-columns: 4;
  --above-large-grid-columns: 6;
">
  <div class="column-2">1 – 2</div>
  <div>3</div>
  <div>4</div>
  <div class="column-2">5 – 6</div>
</div>
{% endblock %}
{% block code %}
<div class="grid" style="
  --grid-columns-default: 2;
  --above-medium-grid-columns: 4;
  --above-large-grid-columns: 6;
">
  <div class="column-2">1 – 2</div>
  <div>3</div>
  <div>4</div>
  <div class="column-2">5 – 6</div>
</div>
{% endblock %}
{% endembed %}


<h2 id="breakpoints">Breakpoints</h2>
<p>Breakpoints are used to apply styles based on the viewport size. The Design System provides a set of standard breakpoints, which can be accessed with custom media queries (<code>@media (--above-x)</code> and <code>@media (--below-x)</code>). Also, certain utility classes use breakpoint names to conditionally apply their styles.</p>
<table>
  <thead>
    <tr>
      <th>Breakpoint</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="width: 19ch"><code>small</code></td>
      <td><code>640px</code></td>
    </tr>
    <tr>
      <td><code>medium</code></td>
      <td><code>768px</code></td>
    </tr>
    <tr>
      <td><code>large</code></td>
      <td><code>1000px</code></td>
    </tr>
    <tr>
      <td><code>x-large</code></td>
      <td><code>1200px</code></td>
    </tr>
  </tbody>
</table>

<h3 id="viewport-based-hiding">Viewport-based hiding</h3>
<p>Breakpoint utilities are available for hiding content based on the screen size: <code>.hide-below-x</code> or <code>.hide-above-x</code>. Example:</p>

{% embed "@tch/includes/example.twig" %}
{% block content %}
<p class="hide-below-medium">Content not for screen sizes below 768px.</p>
<p class="hide-above-x-large">Content not for screen sizes above 1200px.</p>
{% endblock %}
{% endembed %}


<p>Note these utilities are only intended to switch out actual content. Avoid duplicating elements just to adjust styling between different screen sizes. Instead, prefer adjusting the design of a single element in CSS with media queries.</p>
<h2 id="size-and-space">Size and space</h2>
<p>The Design System provides a collection of tokens for setting space (margin, padding, gap) and size (width, height) on elements. Each constant is a multiple of a base unit of 4px.</p>
<div class="size-space-chart grid gap-x-loose align-center">
  <div class="column-2">
    <span class="font-weight-semibold">Size</span>
  </div>
  <dl class="size-chart row gap-normal column-10">
    <div>
      <dt><code>x-small</code></dt>
      <dd style="--size-bar-height: 24px">24px</dd>
    </div>
    <div>
      <dt><code>small</code></dt>
      <dd style="--size-bar-height: 32px">32px</dd>
    </div>
    <div>
      <dt><code>medium</code></dt>
      <dd style="--size-bar-height: 40px">40px</dd>
    </div>
    <div>
      <dt><code>large</code></dt>
      <dd style="--size-bar-height: 48px">48px</dd>
    </div>
    <div>
      <dt><code>x-large</code></dt>
      <dd style="--size-bar-height: 56px">56px</dd>
    </div>
  </dl>

  <div class="column-2">
    <span class="font-weight-semibold">Space</span>
  </div>
  <dl class="space-chart row gap-normal column-10">
    <div>
      <dt><code>x-tight</code></dt>
      <dd style="--space-bar-padding: 4px"><span>4px</span></dd>
    </div>
    <div>
      <dt><code>tight</code></dt>
      <dd style="--space-bar-padding: 8px"><span>8px</span></dd>
    </div>
    <div>
      <dt><code>normal</code></dt>
      <dd style="--space-bar-padding: 16px"><span>16px</span></dd>
    </div>
    <div>
      <dt><code>loose</code></dt>
      <dd style="--space-bar-padding: 24px"><span>24px</span></dd>
    </div>
    <div>
      <dt><code>x-loose</code></dt>
      <dd style="--space-bar-padding: 32px"><span>32px</span></dd>
    </div>
  </dl>
</div>

<p>Space and size tokens are usable via custom properties in CSS.</p>
<table>
  <thead>
    <tr>
      <th>Custom property</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--tcds-space-x</code></td>
      <td>A space value corresponding to <code>x</code> size token.</td>
    </tr>
    <tr>
      <td><code>--tcds-size-x</code></td>
      <td>A size value corresponding to <code>x</code> size token.</td>
    </tr>
  </tbody>
</table>

<p>Space tokens are usable via utility classes in HTML.</p>
<table>
  <thead>
    <tr>
      <th>Class</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>.gap-x</code></td>
      <td>Sets the <code>gap</code> property to <code>x</code> space token.</td>
    </tr>
    <tr>
      <td><code>.column-gap-x</code></td>
      <td>Sets the <code>column-gap</code> property to <code>x</code> space token.</td>
    </tr>
    <tr>
      <td><code>.row-gap-x</code></td>
      <td>Sets the <code>row-gap</code> property to <code>x</code> space token.</td>
    </tr>
    <tr>
      <td><code>.margin-bottom-x</code></td>
      <td>Sets the <code>margin-bottom</code> property to <code>x</code> space token.</td>
    </tr>
  </tbody>
</table>

<h2 id="alignment">Alignment</h2>
<p>The Design System provides alignment utility classes for flexbox, grid, and floating.</p>
<table>
  <thead>
    <tr>
      <th style="width: 22ch">Class</th>
      <th>Property</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>.row</code></td>
      <td><code>display: flex; flex-flow: row wrap;</code></td>
    </tr>
    <tr>
      <td><code>.column</code></td>
      <td><code>display: flex; flex-direction: column;</code></td>
    </tr>
    <tr>
      <td><code>.flex-x</code></td>
      <td><code>flex: x</code>, where <code>x</code> is <code>1</code> through <code>12</code></td>
    </tr>
    <tr>
      <td style="white-space: nowrap"><code>.justify-space-between</code></td>
      <td><code>justify-content: space-between;</code></td>
    </tr>
    <tr>
      <td><code>.justify-start</code><br><code>.justify-left</code></td>
      <td><code>justify-content: start;</code></td>
    </tr>
    <tr>
      <td><code>.justify-end</code><br><code>.justify-right</code></td>
      <td><code>justify-content: end;</code></td>
    </tr>
    <tr>
      <td><code>.justify-center</code></td>
      <td><code>justify-content: center;</code></td>
    </tr>
    <tr>
      <td><code>.align-start</code><br><code>.align-top</code></td>
      <td><code>align-items: start;</code></td>
    </tr>
    <tr>
      <td><code>.align-end</code><br><code>.align-bottom</code></td>
      <td><code>align-items: end;</code></td>
    </tr>
    <tr>
      <td><code>.align-center</code></td>
      <td><code>align-items: center;</code></td>
    </tr>
    <tr>
      <td><code>.float-left</code>*</td>
      <td>
<pre>
float: left;
margin: 0 var(--tcds-space-loose) var(--tcds-space-loose) 0;
</pre>
      </td>
    </tr>
    <tr>
      <td><code>.float-right</code>*</td>
      <td>
<pre>
float: left;
margin: 0 0 var(--tcds-space-loose) var(--tcds-space-loose);
</pre>
      </td>
    </tr>
  </tbody>
</table>

<p><small>* Float utilities only apply above the <code>small</code> breakpoint. Below <code>small</code>, the element will be centered and given only a bottom margin.</small></p>
{% endblock %}