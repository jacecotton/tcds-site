{# DO NOT EDIT. This file was compiled from Markdown; please edit the source .md
file and run the gulp process to compile (either `gulp` or `npm run dev` from
the terminal). #}
{% extends "@tch/base.twig" %}
{% block body %}
<h2 id="quick-start-cdn">Quick start (CDN)</h2>
<p>To start using the Design System with minimal setup, you can load the precompiled CSS and JavaScript bundles straight from a CDN.</p>
<pre><code class="language-html">&lt;head&gt;
  ...
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/@txch/tcds/dist/tcds.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
  ...
  &lt;script src=&quot;https://unpkg.com/@txch/tcds/dist/tcds.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
</code></pre>
<p>This allows you to use all components, utility classes, base styles, and content and form styles.</p>
<p>However, to use Twig templates and local copies of static assets (images, fonts), you will need to install the Design System as a project dependency and set up a build process, or integrate it with an existing one.</p>
<h2 id="local-setup">Local setup</h2>
<p>Installing the Design System locally gives you uncompiled assets that you will then need to bundle and compile with the rest of your project&#39;s code.</p>
<h3 id="build-system">Build system</h3>
<p>We use <a href="https://www.npmjs.com/">npm</a> for front-end package management, for which you will need to install <a href="https://nodejs.org/en/">Node.js</a>. We recommend using <a href="https://www.npmjs.com/package/gulp">Gulp</a> for the build system and <a href="https://www.npmjs.com/package/webpack-stream">Webpack</a> for module bundling and loading.</p>
<p>The only strictly necessary dependency is <a href="https://www.npmjs.com/package/sass">Sass</a>, a stylesheet preprocessor. It is also necessary to use the <a href="https://github.com/alextech/constructable-style-loader">constructable-style-loader</a> in your Webpack configuration for your scripts.</p>
<p>For browser support, we also recommend using our <a href="https://github.com/jacecotton/tcds/blob/main/.browserslistrc">.browserslistrc</a> config and <a href="https://www.npmjs.com/package/postcss">PostCSS</a> with <a href="https://www.npmjs.com/package/autoprefixer">Autoprefixer</a> and <a href="https://www.npmjs.com/package/postcss-custom-media">postcss-custom-media</a> for CSS, and <a href="https://www.npmjs.com/package/babel-loader">Babel</a> (<a href="https://www.npmjs.com/package/@babel/core">core</a>, <a href="https://www.npmjs.com/package/@babel/preset-env">preset-env</a>) for JavaScript. Without these, the Design System will function as expected only for the latest evergreen browsers. Otherwise, it will function for <em>at least</em> the following:</p>

{% set supported_browsers = {
  "Chrome": ["https://upload.wikimedia.org/wikipedia/commons/e/e1/Google_Chrome_icon_%28February_2022%29.svg", "100+"],
  "Edge": ["https://upload.wikimedia.org/wikipedia/commons/9/98/Microsoft_Edge_logo_%282019%29.svg", "100+"],
  "Firefox": ["https://upload.wikimedia.org/wikipedia/commons/a/a0/Firefox_logo%2C_2019.svg", "&lt; 1 year"],
  "Safari": ["https://upload.wikimedia.org/wikipedia/commons/5/52/Safari_browser_logo.svg", "13+"],
  "Internet Explorer": ["https://upload.wikimedia.org/wikipedia/commons/1/18/Internet_Explorer_10%2B11_logo.svg", "ðŸš«"],
} %}

<ul class="row gap-x-loose justify-center" style="margin: 3rem 0">
  {% for browser, data in supported_browsers %}
    <li class="column gap-normal align-center" {% if data[1] == "ðŸš«" %} style="opacity: .2" {% endif %}>
      <img src="{{ data[0] }}" alt="{{ browser }} logo" title="{{ browser }}" width="24">
      <span class="font-sans-serif font-size-small">{{ data[1]|raw }}</span>
    </li>
  {% endfor %}
</ul>


<h3 id="installation">Installation</h3>
<p>Install the Design System by running the following from whatever directory you keep your front-end assets (theme folder, etc.):</p>
<pre><code class="language-terminal">npm install --save-dev @txch/tcds
</code></pre>
<p>This will install the <a href="https://www.npmjs.com/package/@txch/tcds">@txch/tcds</a> package from the npm registry as a development dependency.</p>
<h3 id="import-and-use">Import and use</h3>
<p>Import the Design System in the main entry files for your stylesheet and scripts. Sass and webpack will both look inside the closest <code>node_modules</code> folder.</p>
<pre><code class="language-css">// main.scss
@use &quot;~@txch/tcds&quot;;
</code></pre>
<pre><code class="language-js">// main.js
import &quot;@txch/tcds&quot;;
</code></pre>
<h4 id="local-asset-location">Local asset location</h4>
<!-- consider https://github.com/postcss/postcss-url for css static assets -->

<p>Note that <a href="/components">web components</a> inject the Design System&#39;s base styles into their shadow trees by looking for a <code>link</code> element in the <code>head</code> of the document with a <code>title</code> of <code>tcds-base</code>. If none is found, it will be pulled from a CDN using <a href="https://unpkg.com/">UNPKG</a>.</p>
<p>This is sub-optimal for performance, so to provide a local one, import the Design System package in a <code>tcds.scss</code> file, then link to it separately in your template&#39;s <code>head</code>:</p>
<pre><code class="language-css">// tcds.scss
@use &quot;~@txch/tcds&quot;;
</code></pre>
<pre><code class="language-html">&lt;!-- index.html --&gt;
&lt;head&gt;
  ...
  &lt;!-- A separate link for the Design System --&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles/tcds.css&quot; title=&quot;tcds-base&quot;&gt;
  &lt;!-- All other project-specific styles --&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles/main.css&quot;&gt;
&lt;/head&gt;
</code></pre>
<h4 id="granular-imports">Granular imports</h4>
<p>You can import only specific style and script modules if you do not need the entire Design System bundle:</p>
<pre><code class="language-css">@use &quot;~@txch/tcds/styles/color&quot;;
@use &quot;~@txch/tcds/styles/typography&quot;;
</code></pre>
<pre><code class="language-js">import &quot;@txch/tcds/components/button/index.js&quot;;
import &quot;@txch/tcds/components/card/index.js&quot;;
</code></pre>
<p>You can also import specific utilities directly from the Design System package&#39;s entry file:</p>
<pre><code class="language-js">import { WebComponent, AnimateElement } from &quot;@txch/tcds&quot;;
</code></pre>
<p>JavaScript utilities are documented on their relevant pages.</p>
{% endblock %}