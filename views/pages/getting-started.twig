{# DO NOT EDIT. This file was compiled from Markdown; please edit the source .md
file and run the gulp process to compile (either `gulp` or `npm run dev` from
the terminal). #}
{% extends "@tch/base.twig" %}
{% block body %}
<h2 id="quick-start-cdn">Quick start (CDN)</h2>
<p>To start using the Design System with minimal setup, you can load the precompiled CSS and JavaScript bundles straight from a CDN.</p>
<pre><code class="language-html">&lt;head&gt;
  ...
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/@txch/tcds/dist/styles/tcds.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
  ...
  &lt;script async src=&quot;https://unpkg.com/@txch/tcds/dist/scripts/tcds.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
</code></pre>
<p>Then, you can use the HTML snippets documented for each component, primitive, and utility class, with styling and functionality taken care of. For example, from the <a href="/components/button">Button component</a>:</p>
<pre><code class="language-html">&lt;tcds-button&gt;Click me&lt;/tcds-button&gt;
</code></pre>
<p>However, because the code is precompiled, you are limited to HTML snippets, and have no options for configuration. To fully integrate the Design System, we recommend <a href="#local-installation">installing it as a project dependency</a>.</p>
<h2 id="local-installation">Local installation</h2>
<p>Installing the Design System locally gives you greater configuration options, uncompiled assets, and utilities for Sass and JavaScript. You can then import, bundle, and compile the Design System along with your project&#39;s other code.</p>
<h3 id="step-1-download-project-files">Step 1. Download project files</h3>
<p>Download the following files, and place them in whatever directory you keep the front-end code of your project (CSS, JavaScript, etc.) This could be the root folder of your project, or, in the case of a Drupal site, a custom theme folder.</p>
<ul>
<li><a download href="/downloads/package.json">Download package.json</a> — Specifies the necessary dependencies for the project (including the Design System).</li>
<li><a download href="/downloads/gulpfile.js">Download gulpfile.js</a> — Sets up a build process for compiling the Design System along with your project&#39;s other code.</li>
</ul>
<details>
  <summary>Recommended file structure</summary>
  <div>

<p>It is recommended to structure your front-end code as follows.</p>
<ul>
<li>(Your project&#39;s folder for front-end code)<ul>
<li><code>package.json</code></li>
<li><code>gulpfile.js</code></li>
<li><code>assets/</code> — Uncompiled source code.<ul>
<li><code>styles/</code> — Sass stylesheets.</li>
<li><code>scripts/</code> — JavaScript modules.</li>
<li><code>images/</code> — Theme image assets.</li>
</ul>
</li>
<li><code>public/</code> — Compiled production code.<ul>
<li><code>styles/</code> — CSS stylesheets.</li>
<li><code>scripts/</code> — JavaScript bundles.</li>
<li><code>images/</code> — Optimized theme images.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>If you have a different structure, you will need to modify the gulpfile as instructed in the comments.
  </div></p>
</details>

<details>
  <summary>Already have an npm project or build process?</summary>
  <div>

<p>The above files are not required to use—they are provided only for convenience. If you already have a <code>package.json</code> file, you can install the Design System directly by running:</p>
<pre><code class="language-command">npm install --save-dev @txch/tcds
</code></pre>
<p>If you already have your own build process, you will need to replicate the build steps in the provided <code>gulpfile.js</code>. The required ones are:</p>
<ul>
<li>An ES module bundler, we use <a href="https://www.npmjs.com/package/webpack-stream">webpack</a></li>
<li><a href="https://www.npmjs.com/package/sass">Sass</a> for preprocessing and compiling source stylesheets</li>
<li><a href="https://babeljs.io/">Babel</a> for compiling next-generation JavaScript to backwards-compatible syntax</li>
</ul>
<p>Not required, but recommended:</p>
<ul>
<li><a href="https://www.npmjs.com/package/gulp-postcss">PostCSS</a> for browser compatibility</div>
</details></li>
</ul>
<h3 id="step-2-install-dependencies">Step 2. Install dependencies</h3>
<p>Next, from a command line, <code>cd</code> into the folder you placed the downloads (e.g. <code>my-project/</code>):</p>
<pre><code class="language-command">cd my-project
</code></pre>
<p>Make sure you have <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm">installed Node.js and npm</a> (npm is a package manager used to manage the Design System as a dependency). Then, install the dependencies listed in the <code>package.json</code> file by running:</p>
<pre><code class="language-command">npm install
</code></pre>
<h3 id="step-3-import-configure-and-build">Step 3. Import, configure, and build</h3>
<p>Now, you should be able to import Design System assets from your front-end code.</p>
<h4 id="javascript">JavaScript</h4>
<p>From a JavaScript file, you can import the entire bundle from the <code>node_modules</code> folder:</p>
<pre><code class="language-javascript">import &quot;@txch/tcds/assets/scripts/index.js&quot;;
</code></pre>
<p>Or only the specific modules and/or utilities you actually need:</p>
<pre><code class="language-javascript">import WebComponent from &quot;@txch/tcds/assets/scripts/WebComponent/WebComponent.js&quot;;
import AnimateElement from &quot;@txch/tcds/assets/scripts/animation/AnimateElement.js&quot;;
</code></pre>
<h4 id="sass">Sass</h4>
<p><strong>Tip:</strong> Familiarize yourself with Sass&#39;s <a href="https://sass-lang.com/blog/the-module-system-is-launched">module system</a> (<code>@use</code> and <code>@forward</code>) before proceeding.</p>
<p>From a Sass file, you can import the entire Design System bundle from the provided <code>@tcds</code> namespace:</p>
<pre><code class="language-css">/* main.scss */
@use &quot;@tcds/tcds&quot;;
</code></pre>
<p>Alternatively, you can import specific package bundles:</p>
<pre><code class="language-css">/* main.scss */
@use &quot;@tcds/typography/bundle&quot;;
@use &quot;@tcds/components/bundle&quot;;
</code></pre>
<p>Or even specific modules within a package:</p>
<pre><code class="language-css">/* main.scss */
@use &quot;@tcds/typography/globals&quot;;
@use &quot;@tcds/components/button&quot;;
</code></pre>
<p>To use and configure Sass abstracts (variables, functions, mixins, etc.), create a new <code>_index.scss</code> file and <code>@forward</code> the <code>@tcds/_index.scss</code> file (you only have to specify the path name, as <code>_index</code> files are loaded by default). You can set configuration variables via the <code>with</code> keyword:</p>
<pre><code class="language-css">/* _index.scss */
@forward &quot;@tcds&quot; with (
  $theme-color-primary: &quot;blue&quot;,
);
</code></pre>
<p>To apply these configurations to the TCDS style bundle, <code>@use</code> the <code>_index.scss</code> file before importing the Design System:</p>
<pre><code class="language-css">/* main.scss */
@use &quot;_index&quot; as *;
@use &quot;@tcds/tcds&quot;;
</code></pre>
<p>Now, from any file throughout your project&#39;s code, you can <code>@use</code> the forwarding file to bring in Design System utilities with the configurations. For example:</p>
<pre><code class="language-css">/* partials/sidebar.scss */
@use &quot;../&quot; as *;
</code></pre>
<p>You can also extend and overwrite Sass maps by creating a corresponding <code>variables</code> file, importing the respective <code>variables</code> file from the TCDS package, and then <code>map.merge</code>-ing the original map with your new map. For example:</p>
<pre><code class="language-css">/* layout/_variables.scss */
@use &quot;sass:map&quot;;
@use &quot;@tcds/layout/abstracts/variables&quot; as *;

$breakpoints: map.merge($breakpoints, (
  /* Overwrite the small breakpoint. */
  &quot;small&quot;: 360px,
  /* Add an xx-large breakpoint. */
  &quot;xx-large&quot;: 1920px,
));
</code></pre>
<p>Now in the root forwarding file, <code>@forward</code> your new <code>variables</code> file after the <code>@tcds/_index.scss</code> file:</p>
<pre><code class="language-css">/* _index.scss */
@forward &quot;@tcds&quot; with (
  $theme-color-primary: &quot;blue&quot;,
);

@forward &quot;layout/variables&quot;;
</code></pre>
<p>In this example, the <code>small</code> breakpoint is now redefined as <code>360px</code>, and a new <code>1920px</code> breakpoint has been added. All breakpoint-relevant code utilities will be generated based off of this map.</p>
<h4 id="compile-and-watch-for-changes">Compile and watch for changes</h4>
<p>Lastly, you can compile all your code together by running the following:</p>
<pre><code class="language-command">npm run dev
</code></pre>
<p>This will build your front-end code from <code>assets/</code> to <code>public/</code> (unless otherwise configured), and will continuously watch for changes, recompiling on every save.</p>
{% endblock %}