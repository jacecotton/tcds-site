{# DO NOT EDIT. This file was compiled from Markdown; please edit the source .md
file and run the gulp process to compile (either `gulp` or `npm run dev` from
the terminal). #}
{% extends "@tch/base.twig" %}
{% block lede %}Writing HTML for Texas Children's products.{% endblock %}
{% block body %}
<p>The following style guide applies to hand-authored, source HTML. This includes any HTML written within Twig and JavaScript templates, for which there are also separate guidelines:</p>
<ul>
<li><a href="https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards">Twig coding standards â€“ Drupal.org</a></li>
<li><a href="/style-guide/javascript">JavaScript style guide</a></li>
</ul>
<h2 id="boilerplate">Boilerplate</h2>
<p>The following elements are the bare minimum for every HTML template:</p>
<ul>
<li>HTML5 doctype</li>
<li>Document language</li>
<li>UTF-8 charset</li>
<li>Responsive viewport</li>
<li>Title</li>
</ul>
<details>
  <summary>HTML boilerplate</summary>

<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html lang=&quot;en-us&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;/html&gt;
</code></pre>
</details>

<p>Everything else is technically optional.</p>
<h2 id="formatting">Formatting</h2>
<ul>
<li>Always enclose attribute values in double quotes (<code>&quot;</code>), not single quotes or unquoted.</li>
<li>Omit values in boolean attributes (e.g. <code>&lt;script async&gt;</code>, not <code>&lt;script async=&quot;&quot;&gt;</code> or <code>&lt;script async=&quot;async&quot;&gt;</code>).</li>
<li>Always include optional closing tags (e.g. <code>&lt;li&gt;&lt;/li&gt;</code>).</li>
<li>Omit the forward slash in self-closing tags (e.g. <code>&lt;br&gt;</code>, not <code>&lt;br /&gt;</code>).</li>
<li>Omit optional attributes (e.g. <code>[type]</code> in stylesheet and script links).</li>
<li>Use exactly one return for every block-level element. Omit new lines for inline-level elements, unless the length would make wrapping and indentation more appropriate.</li>
</ul>
<pre><code class="language-html">&lt;p&gt;
  Paragraph elements are block-level, so new lines are used. &lt;span&gt;Span
  elements&lt;/span&gt; are inline-level, &lt;a href=&quot;#&quot;&gt;and so are links&lt;/a&gt;, so line
  breaks are not used.
&lt;/p&gt;
</code></pre>
<ul>
<li>Do not use excessive whitespace in markup (e.g. <code>&lt;p class=&quot;text&quot;&gt;</code>, not <code>&lt;p class = &quot;text&quot;&gt;</code>).</li>
</ul>
<h2 id="case">Case</h2>
<ul>
<li>Use <code>kebab-case</code> for all naming (custom elements, custom attributes, classes, idents, etc.)</li>
<li>Use lowercase for all syntax (tags, attributes, etc.; e.g. <code>&lt;a href=&quot;#&quot;&gt;</code> not <code>&lt;A HREF=&quot;#&quot;&gt;</code>).</li>
</ul>
<h2 id="semantics">Semantics</h2>
<ul>
<li>Choose elements appropriate to their semantic meaning and functional purpose.</li>
</ul>
<pre><code class="language-html">&lt;!-- Incorrect: Links are not buttons --&gt;
&lt;a class=&quot;button&quot; href=&quot;javascript:someAction()&quot;&gt;Click me&lt;/a&gt;

&lt;!-- Incorrect: Buttons are not links --&gt;
&lt;button onclick=&quot;window.location.href = &#39;/some-page&#39;&quot;&gt;Click me&lt;/button&gt;
</code></pre>
<ul>
<li>When available, use semantic HTML elements over primitives with <code>[role]</code> and other ARIA attributes added.</li>
</ul>
<pre><code class="language-html">&lt;!-- Incorrect: There is no reason to use a primitive here --&gt;
&lt;div role=&quot;region&quot;&gt;...&lt;/div&gt;

&lt;!-- Correct: Section has an implicit region role --&gt;
&lt;section&gt;...&lt;/section&gt;

&lt;!-- Correct: There is no available semantic element, and the appropriate
     functional element is used in addition to the role --&gt;
&lt;button role=&quot;tab&quot;&gt;...&lt;/button&gt;
</code></pre>
<ul>
<li>Only use style-imparting semantic elements (such as <code>&lt;strong&gt;</code>) if the semantic meaning is appropriate for the content:</li>
</ul>
<pre><code class="language-html">&lt;!-- Incorrect: The enclosed text is not meant to be strongly stated,
     only visually emphasized --&gt;
&lt;strong&gt;Notice:&lt;/strong&gt; Lorem ipsum dolor sit amet ...

&lt;!-- Better: The enclosed text arguably is meant to have attention
     &quot;b&quot;rought to it --&gt;
&lt;b&gt;Notice:&lt;/b&gt; Lorem ipsum dolor sit amet ...

&lt;!-- Best: The enclosed text is purely visually emphasized --&gt;
&lt;span class=&quot;font-weight-bold&quot;&gt;Notice:&lt;/span&gt; Lorem ipsum dolor sit amet ...

&lt;!-- Correct: The enclosed text is meant to be strongly stated --&gt;
We will be &lt;strong&gt;closed on Monday&lt;/strong&gt; for maintenance.
</code></pre>
<h2 id="naming">Naming</h2>
<ul>
<li>For unscoped and unencapsulated styles, use the BEM convention for class naming of block-level elements and their children.</li>
<li>With the exception of Design System-provided utility classes, use <em>semantic</em> class naming over <em>functional</em> or <em>contextual</em> class naming.</li>
</ul>
<pre><code class="language-html">&lt;!-- Functional: Mixes concerns, verbose, non-DRY, decentralized --&gt;
&lt;div class=&quot;bg-white padding-10 box-shadow border-radius-10 flex-row&quot;&gt;
  &lt;img ... class=&quot;flex-1 border-radius-100 align-center margin-5&quot;&gt;
  &lt;div class=&quot;flex-column gap-2 padding-10&quot;&gt;
    ...
  &lt;/div&gt;
&lt;/div&gt;

&lt;!-- Contextual: Insufficiently generic (non-reusable, non-scalable),
     tends to bloat --&gt;
&lt;div class=&quot;doctor-info&quot;&gt;
  &lt;img ... class=&quot;doctor-info__portrait&quot;&gt;
  &lt;div class=&quot;doctor-info__name-and-contact&quot;&gt;
    ...
  &lt;/div&gt;
&lt;/div&gt;

&lt;!-- Semantic: Reusable, pattern-based, content-agnostic, concise,
     separates concerns, DRY, centralized --&gt;
&lt;div class=&quot;card&quot;&gt;
  &lt;img ... class=&quot;card__image&quot;&gt;
  &lt;div class=&quot;card__content&quot;&gt;
    ...
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
{% endblock %}