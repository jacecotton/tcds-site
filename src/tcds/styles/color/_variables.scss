@use "sass:map";

/**
 * This color system uses the CIELUV color space to maintain perceptual
 * uniformity of luminance. The colors were generated using the HSLuv tool,
 * based on the primary brand color as a starting point (#da2530), which in
 * CIELUV represented as HSL is H 11, S 87.7%, L 47.6%. Thus, all colors have
 * S 87.7%, all reds have H 11, and all medium/default colors have L 47.6%.
 *
 * The rest of the colors were generated accordingly, using these hues: red: 11,
 * blue: 250, yellow: 78.8, green: 135, gray: 265.9.
 *
 * Tints and shades were generated in increments of roughly 10%â€“20%, and indexed
 * on a scale of 0 to 500 in increments of 100: 0: 97.5% (~100%), 100: 90%, 200:
 * 70%, 300: 47.6% (~50%), 400: 30%, 500: 10%.
 *
 * A difference between two grades of 300 or greater means those two colors are
 * accessible together. This is the "magic number": 300 is both an accessible
 * difference between two grades, as well as the "medium" grade.
 *
 * Lastly, for each color, a corresponding preferred foreground color and link
 * color is specified.
 */

/**
 * The colors.
 */

$-red-0: #fff6f6;
$-red-100: #ffdada;
$-red-200: #ff888b;
$-red-300: #da2530;
$-red-400: #93000f;
$-red-500: #410003;

$-blue-0: #f5f8ff;
$-blue-100: #d5e3ff;
$-blue-200: #71adff;
$-blue-300: #2d73bc;
$-blue-400: #004880;
$-blue-500: #001c37;

$-green-0: #e3ffe8;
$-green-100: #64ff91;
$-green-200: #00c559;
$-green-300: #248142;
$-green-400: #005322;
$-green-500: #002109;

$-yellow-0: #fff9d4;
$-yellow-100: #f5e550;
$-yellow-200: #bbae00;
$-yellow-300: #7b7324;
$-yellow-400: #434800;
$-yellow-500: #1f1c00;

$-gray-0: #f8f8f9;
$-gray-100: #e2e2e7;
$-gray-200: #aaaab3;
$-gray-300: #707079;
$-gray-400: #464652;
$-gray-500: #1b1b1e;

$-shade-0: hsl(0 0% 0% / 3%);
$-shade-100: hsl(0 0% 0% / 10%);
$-shade-200: hsl(0 0% 0% / 30%);
$-shade-300: hsl(0 0% 0% / 53.4%);
$-shade-400: hsl(0 0% 0% / 70%);
$-shade-500: hsl(0 0% 0% / 90%);

/**
 * Although colors are defined above as basic variables, we'll also create a
 * map, that way we can iterate over them, use getter functions, etc. The reason
 * we don't just put the values directly in the map is because many values need
 * to be referenced more than once within the map.
 */

$colors: (
  "red": (
    "0": (
      "background": $-red-0,
      "foreground": $-red-400,
    ),
    "100": (
      "background": $-red-100,
      "foreground": $-red-400,
      "link": $-blue-400,
    ),
    "200": (
      "background": $-red-200,
      "foreground": $-red-500,
      "link": $-blue-500,
    ),
    "300": (
      "background": $-red-300,
      "foreground": $-red-0,
      "link": $-blue-0,
    ),
    "400": (
      "background": $-red-400,
      "foreground": $-red-0,
      "link": $-blue-100,
    ),
    "500": (
      "background": $-red-500,
      "foreground": $-red-100,
      "link": $-blue-200,
    ),
  ),
  
  "blue": (
    "0": (
      "background": $-blue-0,
      "foreground": $-blue-400,
    ),
    "100": (
      "background": $-blue-100,
      "foreground": $-blue-400,
      "link": $-blue-400,
    ),
    "200": (
      "background": $-blue-200,
      "foreground": $-blue-500,
      "link": $-blue-500,
    ),
    "300": (
      "background": $-blue-300,
      "foreground": $-blue-0,
      "link": $-blue-0,
    ),
    "400": (
      "background": $-blue-400,
      "foreground": $-blue-0,
      "link": $-blue-100,
    ),
    "500": (
      "background": $-blue-500,
      "foreground": $-blue-100,
      "link": $-blue-200,
    ),
  ),
  
  "green": (
    "0": (
      "background": $-green-0,
      "foreground": $-green-400,
    ),
    "100": (
      "background": $-green-100,
      "foreground": $-green-400,
      "link": $-blue-400,
    ),
    "200": (
      "background": $-green-200,
      "foreground": $-green-500,
      "link": $-blue-500,
    ),
    "300": (
      "background": $-green-300,
      "foreground": $-green-0,
      "link": $-blue-0,
    ),
    "400": (
      "background": $-green-400,
      "foreground": $-green-0,
      "link": $-blue-100,
    ),
    "500": (
      "background": $-green-500,
      "foreground": $-green-100,
      "link": $-blue-200,
    ),
  ),

  "yellow": (
    "0": (
      "background": $-yellow-0,
      "foreground": $-yellow-400,
    ),
    "100": (
      "background": $-yellow-100,
      "foreground": $-yellow-400,
      "link": $-blue-400,
    ),
    "200": (
      "background": $-yellow-200,
      "foreground": $-yellow-500,
      "link": $-blue-500,
    ),
    "300": (
      "background": $-yellow-300,
      "foreground": $-yellow-0,
      "link": $-blue-0,
    ),
    "400": (
      "background": $-yellow-400,
      "foreground": $-yellow-0,
      "link": $-blue-100,
    ),
    "500": (
      "background": $-yellow-500,
      "foreground": $-yellow-100,
      "link": $-blue-200,
    ),
  ),

  "gray": (
    "0": (
      "background": $-gray-0,
      "foreground": $-gray-400,
    ),
    "100": (
      "background": $-gray-100,
      "foreground": $-gray-400,
      "link": $-blue-400,
    ),
    "200": (
      "background": $-gray-200,
      "foreground": $-gray-500,
      "link": $-blue-500,
    ),
    "300": (
      "background": $-gray-300,
      "foreground": $-gray-0,
      "link": $-blue-0,
    ),
    "400": (
      "background": $-gray-400,
      "foreground": $-gray-0,
      "link": $-blue-100,
    ),
    "500": (
      "background": $-gray-500,
      "foreground": $-gray-100,
      "link": $-blue-200,
    ),
  ),

  "shade": (
    "0": (
      "background": $-shade-0,
    ),
    "100": (
      "background": $-shade-100,
    ),
    "200": (
      "background": $-shade-200,
    ),
    "300": (
      "background": $-shade-300,
    ),
    "400": (
      "background": $-shade-400,
    ),
    "500": (
      "background": $-shade-500,
    ),
  ),
);

/**
 * Semantic aliases.
 *
 * Semantic colors are named according to their purpose, role, or function,
 * rather than by their hue. It is preferred that colors are referenced in the
 * codebase by their semantic aliases in most cases.
 *
 * There are two categories of semantics: theme aliases and interface aliases.
 * Theme aliases refer to their color's purpose in the theme (e.g. primary,
 * secondary, etc.) Interface aliases refer to their color's deeper contextual
 * meaning, as they relate to the content they're paired with (e.g. positive,
 * negative, etc.)
 *
 * Elements that should be themeable should use theme aliases, such as the
 * site's header, link colors, logo backgrounds, etc. Elements that convey a
 * contextual meaning should use interface aliases, such as error messages,
 * notifications, system warnings, etc.
 */

$theme-colors: (
  "primary": map.get($colors, "red"),
  "secondary": map.get($colors, "blue"),
  "tertiary": map.get($colors, "gray"),
);

$interface-colors: (
  "positive": map.get($colors, "green"),
  "negative": map.get($colors, "red"),
  "attention": map.get($colors, "yellow"),
  "notice": map.get($colors, "blue"),
  "neutral": map.get($colors, "gray"),
);