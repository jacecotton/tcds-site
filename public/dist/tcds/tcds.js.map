{"version":3,"sources":["tcds.js","Component.js","slugify.js","Accordion.js","Collapsible.js","Footnotes.js","TOC.js","Tabs.js","components/extensions/Carousel.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_get","target","property","receiver","Reflect","get","base","_superPropBase","desc","Object","getOwnPropertyDescriptor","call","value","object","hasOwnProperty","_getPrototypeOf","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","toString","slice","name","from","test","iter","len","arr2","_inherits","subClass","superClass","create","writable","configurable","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","NewTarget","this","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","getPrototypeOf","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","_objectSpread","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","Component","element","_this","state","stateHandler","propsHandler","debouncedSync","stateBatch","addEventListener","event","newState","detail","prevState","window","cancelAnimationFrame","requestAnimationFrame","sync","_this2","set","store","dispatchEvent","CustomEvent","context","indexOf","_this3","_props","prop","console","warn","String","slugify","separator","undefined","trim","normalize","replace","toLowerCase","Accordion","_Component","_super","_this4","multiselectable","panels","querySelectorAll","buttons","expandAllButton","querySelector","collapseAllButton","activeButtons","document","matches","path","buttonIndex","splice","_this5","button","isActive","panel","getPanelByButton","setAttribute","ontransitionend","hidden","style","height","concat","scrollHeight","find","getAttribute","id","onload","classList","contains","Collapsible","_Component2","_super2","_this6","toggleButtons","expanded","threshold","innerWidth","disable","ResizeObserver","entries","_step","_iterator","contentRect","width","observe","body","toggleButton","stopPropagation","clickOutsideToClose","_this7","removeAttribute","Footnotes","_this8","fnList","createDocumentFragment","fn","fnid","textContent","substring","addFootnoteToList","transformReference","appendChild","fnItem","innerHTML","createRange","createContextualFragment","transformedReference","parentNode","replaceChild","TOC","_this9","headings","headingsOfDepthLimit","heading","parseInt","tagName","depthLimit","renderThreshold","headingTree","generateTree","renderTOC","trackHash","lastHeadingOfLevel","level","headingData","text","children","parent","_this10","addTOCList","branch","tocList","createElement","add","headingObject","tocItem","tocLink","href","_this11","hashChangeHandler","prevCurrentLink","currentLink","location","hash","Tabs","_Component3","_super3","_this12","tabs","panelsContainer","activeTab","hideAll","keymap","ArrowRight","getNextTab","focus","ArrowLeft","getPreviousTab","tab","code","_this13","getPanelByTab","Event","relativeTab","HTMLElement","Carousel","_Tabs","_super4","_this14","controls","previous","playpause","playing","autoplay","temporaryPause","IntersectionObserver","entry","isIntersecting","_this15","cycle","setInterval","timing","clearInterval"],"mappings":"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","file":"tcds.js","sourcesContent":[null,"/**\n * A superclass for scripting components with state-driven DOM manipulation.\n *\n * Note that this utility has no \"render\" functionality. Rather, it assumes pre-\n * existing markup, and simply provides a way to manipulate DOM dynamically\n * according to the current value of some state.\n *\n * @param {HTMLElement} element - The root-most HTML element to which the\n * component script applies.\n * @param {object} props - Static properties of the component instance.\n *\n * @property {object} state - An object for keeping track of the component's\n * state. Changes to this object are intercepted by a proxy, which then emits a\n * `state-change` event, triggering the component's local `sync` method, which\n * is responsible for updating the DOM, while batching and passing the changed\n * state data to the method for reference (thereby keeping the state and the\n * DOM in \"sync\").\n * @property {object} props - An object for referencing static properties passed\n * to the component at time of instantiation.\n */\nclass Component {\n  constructor(element, props) {\n    // Make the element accessible as a property of the extending class.\n    this.element = element;\n\n    // Set up a proxy to intercept changes to `this.state`. Fires a\n    // `state-change` event when a change is detected.\n    this.state = new Proxy({}, this.stateHandler());\n\n    // Set up a proxy to intercept changes to `this.props`. Will first merge the\n    // passed `props` argument to the object so they are accessible as a\n    // property of `this`.\n    this.props = new Proxy({...props}, this.propsHandler());\n\n    /**\n     * Listen for state changes and then call the `sync` method to update DOM.\n     *\n     * First, wait to update the DOM until all back-to-back state changes have\n     * finished (debouncing), then pass all the changed state as one object to\n     * the `sync` method (batching).\n     */\n\n    // Keep track of whether to debounce.\n    this.debouncedSync = null;\n    // Init a collection of changed state to pass to the sync method all at\n    // once.\n    this.stateBatch = {};\n\n    // When state updates...\n    this.element.addEventListener(\"state-change\", (event) => {\n      // Update the collection of changed state properties with their new and\n      // previous values.\n      this.stateBatch.newState = { ...this.stateBatch.newState, ...event.detail.newState };\n      this.stateBatch.prevState = { ...this.stateBatch.prevState, ...event.detail.prevState };\n\n      // `debouncedSync` will be defined as a `requestAnimationFrame` (see\n      // below) if the current listener has already been triggered. So if\n      // `debouncedSync` is not `null` (as initialized), state has been changed\n      // multiple times before the next available animation frame (i.e. back-to-\n      // back). So, cancel the existing request and try again on the next\n      // animation frame.\n      if(this.debouncedSync !== null) {\n        window.cancelAnimationFrame(this.debouncedSync);\n      }\n\n      this.debouncedSync = window.requestAnimationFrame(() => {\n        // The next animation frame is available, which means all operations\n        // have completed without the request being canceled. So, call `sync`\n        // and pass the batched data.\n        this.sync(this.stateBatch.newState, this.stateBatch.prevState);\n\n        // Reset state batch (removes unchanged state).\n        this.stateBatch = {};\n      });\n    });\n  }\n\n  /**\n   * A callback for a proxy on `this.state` to intercept changes. Will check\n   * that the new value is actually different, then fires a custom\n   * `state-change` event to notify listeners of the change, with details about\n   * that change.\n   */\n  stateHandler() {\n    return {\n      // store = the object that `this.state` becomes.\n      // state = the property of the store object that was changed.\n      // value = the new value that the property was set to.\n      set: (store, state, value) => {\n        // Before setting the state prop to the new value, store the current,\n        // i.e. soon-to-be previous, value for later reference.\n        const prevState = {};\n        prevState[state] = store[state];\n\n        // Also provide the state that was changed for later reference. Helpful\n        // for determining which DOM elements to manipulate based on the state\n        // that was actually changed.\n        const newState = {};\n        newState[state] = value;\n\n        // Check that the new state is different.\n        if(store[state] !== value) {\n          // Set state prop to the new value.\n          store[state] = value;\n\n          // Dispatch a listenable event that signals state has changed, with\n          // details about the state change.\n          this.element.dispatchEvent(new CustomEvent(\"state-change\", {\n            detail: {\n              context: this.element,\n              newState: newState,\n              prevState: prevState,\n            },\n          }));\n        }\n\n        return true;\n      },\n\n      // If a property of state is an array or object that is mutated (pushed,\n      // popped, spliced, etc.), the property is actually only \"get\"-ed. We\n      // still want the `set` callback to run, so we'll need to register a new\n      // proxy on that specific property, and only then will a `set` callback\n      // run. So first, we'll check if the property being read is an object or\n      // an array, and if so, set this same handler to a new proxy on the\n      // current property.\n      get: (store, state) => {\n        if([\"[object Object]\", \"[object Array]\"].indexOf(Object.prototype.toString.call(store[state])) > -1) {\n          return new Proxy(store[state], this.stateHandler());\n        }\n\n        return store[state];\n      },\n    };\n  }\n\n  /**\n   * A callback for a proxy on `this.props` to intercept changes. Will check if\n   * the prop attempting to be set already exists in the passed `props`, and if\n   * so, reject it (making props passed to the component instance by the user\n   * immutable at runtime).\n   */\n  propsHandler() {\n    return {\n      // `_props` references the new `this.props` object (rather than the\n      // original `props` constructor parameter).\n      set: (_props, prop, value) => {\n        // If the prop already exists and is different from the attempted\n        // value...\n        if(prop in _props && _props[prop] !== value) {\n          // Reject attempt.\n          console.warn(\"Attempt to mutate prop rejected. This is a problem in component subclass. Try deriving state from prop, or mutate prop value at time of instantiation.\", {\n            \"context\": this.element,\n            \"property\": prop,\n            \"attempted value\": value,\n            \"persisting value\": _props[prop],\n          });\n        } else {\n          // Otherwise proceed with setting the prop as normal.\n          _props[prop] = value;\n        }\n\n        return true;\n      },\n    };\n  }\n\n  /**\n   * Each extending component subclass should have its own `sync` method, which\n   * will be responsible for all reaction to state. Since the method is called\n   * on every state change, it keeps the UI and state in sync, hence the name.\n   * As a result, it is best practice to always reference the current state when\n   * manipulating the DOM.\n   *\n   * @param {object} newState - An object containing only a copy of the changed\n   * state properties and their current values.\n   * @param {object} prevState - An object containing only a copy of the changed\n   * state properties and their previous values.\n   */\n  sync(newState, prevState) {\n    // Note that the subclass's `sync` method will override this one. If one is\n    // not present, this method will fire instead, so a warning should be\n    // logged.\n    console.warn(\"No local sync method provided in component subclass.\");\n  }\n}","/**\n * Generates a slug from a given string. Makes it usable as an ident, class, URL\n * path, file name, etc.\n *\n * Takes a string, trims white space, removes diacritics from the base letter,\n * lowercases all letters, replaces non-alphanumeric characters with a space,\n * removes double spaces, then replaces all single spaces with a separator (a\n * hyphen unless otherwise specified).\n *\n * Note that this does not generate unique IDs because it doesn't track reuse.\n *\n * @param {string} [separator=\"-\"] A character to insert between words (i.e.\n * replace spaces) within the slug.\n *\n * @returns {string} A slug.\n */\n\nString.prototype.slugify = function(separator = \"-\") {\n  return this\n    // Trim leading and trailing white space.\n    .trim()\n    // Remove diacritics from base letter.\n    .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n    // Convert to lowercase.\n    .toLowerCase()\n    // Replace remaining non-alphanumeric characters with space.\n    .replace(/[^\\w\\s]/gi, \" \")\n    // Replace multiple spaces with single space.\n    .replace(/\\s\\s+/g, \" \")\n    // Replace white space with separator.\n    .replace(/\\s+/g, separator);\n}","class Accordion extends Component {\n  constructor(element, props) {\n    super(element, props);\n\n    this.props.multiselectable = this.props.multiselectable || false;\n\n    // Get relevant elements.\n    this.panels = Array.from(this.element.querySelectorAll(\"[data-component-part=panel]\"));\n    this.buttons = Array.from(this.element.querySelectorAll(\"[data-component-part=panel-toggle]\"));\n    this.expandAllButton = this.element.querySelector(\"[data-component-part=expand-all]\");\n    this.collapseAllButton = this.element.querySelector(\"[data-component-part=collapse-all]\");\n\n    // Track which buttons should be active via an array. Start with an empty\n    // array to collapse all sections.\n    this.state.activeButtons = [];\n\n    // Delegate event.\n    document.addEventListener(\"click\", (event) => {\n      // Exit the function if the clicked element is not a toggle button, and if\n      // the clicked toggle button is not a child of the current accordion.\n      if(!(event.target.matches(\"[data-component-part=panel-toggle]\") && event.path.indexOf(this.element) > -1)) {\n        return;\n      }\n\n      // We're going to add each clicked button to an array (`activeButtons`),\n      // then remove that button when clicked again. First we need to check\n      // whether the clicked button is already in the array.\n      const buttonIndex = this.state.activeButtons.indexOf(event.target);\n      const isActive = buttonIndex > -1;\n\n      // If it isn't...\n      if(!isActive) {\n        // If not multiselectable, make the clicked button the only active one\n        // in state.\n        if(this.props.multiselectable === false) {\n          this.state.activeButtons = [event.target];\n        } else {\n          // Otherwise, add the clicked button to the active state with the\n          // others.\n          this.state.activeButtons.push(event.target);\n        }\n      } else {\n        // If the button is currently active and it's clicked again, remove it\n        // from the array.\n        this.state.activeButtons.splice(buttonIndex, 1);\n      }\n    });\n\n    if(this.props.multiselectable === true) {\n      // Add every button to the active sections state on \"expand all\" click.\n      this.expandAllButton.addEventListener(\"click\", () => {\n        this.state.activeButtons = [...this.buttons];\n      });\n\n      // Empty active sections state on \"collapse all\" click.\n      this.collapseAllButton.addEventListener(\"click\", () => {\n        this.state.activeButtons = [];\n      });\n    }\n  }\n\n  // Update DOM after state change.\n  sync() {\n    this.buttons.forEach((button) => {\n      // Determine whether the current button is in the active state.\n      const isActive = this.state.activeButtons.indexOf(button) > -1;\n\n      // Get the panel associated with the button.\n      const panel = this.getPanelByButton(button);\n\n      // Set ARIA state on button.\n      button.setAttribute(\"aria-expanded\", isActive);\n\n      if(isActive) {\n        // Remove leftover event listener from collapse transition.\n        panel.ontransitionend = null;\n        \n        // Unhide the panel (still collapsed).\n        panel.hidden = false;\n\n        // When ready...\n        requestAnimationFrame(() => {\n          // Uncollapse the panel (causes transition).\n          panel.style.height = `${panel.scrollHeight}px`;\n        });\n      } else {\n        // Collapse the panel (causes transition).\n        panel.style.height = \"0px\";\n\n        // After that transition ends...\n        panel.ontransitionend = () => {\n          // Fully hide the panel for proper correspondence with ARIA state.\n          panel.hidden = true;\n        };\n      }\n    });\n  }\n\n  /** Utilities */\n\n  /**\n   * Get the panel controlled by the given toggle button.\n   *\n   * @param {HTMLElement} button - The button for which you want to get the\n   * associated panel.\n   * @returns {HTMLElement} - A panel.\n   */\n  getPanelByButton(button) {\n    // Return the panel with an ID matching the `[aria-controls]` attribute of\n    // the button.\n    return this.panels.find((panel) => {\n      return button.getAttribute(\"aria-controls\") === panel.id;\n    });\n  }\n}\n\n// Wait for the window to fully load to ensure height calculations of panels are\n// accurate.\nwindow.onload = () => {\n  document.querySelectorAll(\"[data-component=Accordion]\").forEach((instance) => {\n    new Accordion(instance, {\n      multiselectable: instance.classList.contains(\"Accordion--multiselectable\"),\n    });\n  });\n};","/**\n * Collapsible element.\n *\n * Adds functionality to expand/collapse an element on toggle button click. Only\n * applies to smaller screens (as specified by `props.threshold`); the\n * functionality is disabled if the screen is above the threshold.\n *\n * @param {Object} props\n * @param {number} props.threshold - The maximum screen size (in pixels) at\n * which the collapse/expand functionality should apply.\n * @param {boolean} [props.clickOutsideToClose=false] - Whether the element\n * should collapse when clicking outside on the body.\n */\n\nclass Collapsible extends Component {\n  constructor(element, props) {\n    super(element, props);\n\n    // Get relevant DOM elements.\n    this.toggleButtons = document.querySelectorAll(`[aria-controls=${this.element.id}]`);\n\n    this.state.expanded = false;\n\n    if(this.props.threshold !== null) {\n      if(window.innerWidth > this.props.threshold) {\n        this.state.disable = true;\n      }\n\n      // Do the same check as above on every screen resize.\n      const shouldCollapseElement = new ResizeObserver(entries => {\n        for(let entry of entries) {\n          if(entry.contentRect.width <= this.props.threshold) {\n            this.state.disable = false;\n          } else {\n            this.state.disable = true;\n          }\n        }\n      });\n\n      // Attach resize observer to body element.\n      shouldCollapseElement.observe(document.body);\n    }\n\n    // Toggle expanded state on toggle button click.\n    this.toggleButtons.forEach((toggleButton) => {\n      toggleButton.addEventListener(\"click\", (event) => {\n        event.stopPropagation();\n        this.state.expanded = !this.state.expanded;\n      });\n    });\n\n    if(this.props.clickOutsideToClose === true) {\n      // Close the navigation on click outside of it.\n      document.body.addEventListener(\"click\", () => {\n        this.state.expanded = false;\n      });\n\n      // Prevent closure if the click is inside the navigation element.\n      this.element.addEventListener(\"click\", (event) => {\n        event.stopPropagation();\n      });\n    }\n  }\n\n  // Update DOM on state change.\n  sync(newState, prevState) {\n    // Only toggle expanded state if the functionality has not been disabled.\n    if(this.state.disable !== true) {\n      // Set ARIA state on toggle buttons.\n      this.toggleButtons.forEach((toggleButton) => {\n        toggleButton.setAttribute(\"aria-expanded\", this.state.expanded);\n\n        if(!toggleButton.getAttribute(\"aria-controls\")) {\n          toggleButton.setAttribute(\"aria-controls\", toggleButton.getAttribute(\"data-aria-controls\"));\n        }\n      });\n\n      // Set hidden state on element.\n      this.element.hidden = !this.state.expanded;\n    } else {\n      // Remove ARIA attributes from button.\n      this.toggleButtons.forEach((toggleButton) => {\n        // But store the controls value in a data- attribute for later\n        // reference.\n        toggleButton.setAttribute(\"data-aria-controls\", toggleButton.getAttribute(\"aria-controls\"));\n        toggleButton.removeAttribute(\"aria-controls\");\n        toggleButton.removeAttribute(\"aria-expanded\");\n      });\n\n      // Unhide the element.\n      this.element.hidden = false;\n    }\n  }\n}","class Footnotes {\n  constructor(element) {\n    this.element = element;\n\n    if(this.element) {\n      this.fnList = document.createDocumentFragment();\n\n      document.querySelectorAll(\"[data-footnote]\").forEach((fn) => {\n        const fnid = fn.textContent.substring(0, 20).slugify();\n\n        this.addFootnoteToList(fn, fnid);\n        this.transformReference(fn, fnid);\n      });\n\n      this.element.appendChild(this.fnList);\n    }\n  }\n\n  addFootnoteToList(fn, fnid) {\n    const fnItem = `\n      <li class=\"Footnotes__item\" role=\"doc-footnote\">\n        <span id=\"fn-${fnid}\">\n          ${fn.innerHTML}\n\n          <a href=\"#ref-${fnid}\" title=\"Return to reference\">\n            <span class=\"visually-hidden\">Return to reference</span>\n            <span aria-hidden=\"true\">⤴️</span>\n          </a>\n        </span>\n      </li>\n    `;\n\n    this.fnList.appendChild(document.createRange().createContextualFragment(fnItem));\n  }\n\n  transformReference(fn, fnid) {\n    const transformedReference = `<a href=\"#fn-${fnid}\" class=\"Footnote-ref\" id=\"ref-${fnid}\" aria-describedby=\"fn-${fnid}\" role=\"doc-noteref\" title=\"Go to footnote\"><span class=\"visually-hidden\">reference to footnote</span></a>`;\n\n    fn.parentNode.replaceChild(document.createRange().createContextualFragment(transformedReference), fn);\n  }\n}\n\nnew Footnotes(document.querySelector(\"[data-component=Footnotes]\"));","/**\n * Generates a table of contents (TOC) from headings in a document.\n *\n * This script assumes two important things:\n * 1. The headings already have unique IDs.\n * 2. The headings follow a proper order, not skipping any heading levels.\n *\n * @param {object} options Configuration options for the TOC.\n * @param {number} [options.renderThreshold=4] The minimum amount of headings\n * there must be in the document for the TOC to render.\n * @param {number} [options.depthLimit=4] The maximum heading level to display\n * in the TOC.\n */\n\nclass TOC {\n  constructor(element, props) {\n    this.element = element;\n    this.props = props;\n\n    this.headings = Array.from(document.querySelectorAll(\"h2, h3, h4, h5, h6\"));\n\n    this.headingsOfDepthLimit = this.headings.filter((heading) => {\n      return parseInt(heading.tagName.substring(1)) <= this.props.depthLimit;\n    });\n    \n    if(this.headingsOfDepthLimit.length >= this.props.renderThreshold) {\n      this.headingTree = this.generateTree();\n      this.renderTOC();\n      this.trackHash();\n    }\n  }\n\n  generateTree() {\n    const headingTree = [];\n    const lastHeadingOfLevel = {};\n\n    this.headings.forEach((heading) => {\n      const level = parseInt(heading.tagName.substring(1));\n\n      const headingData = {\n        level: level,\n        id: heading.id,\n        text: heading.textContent,\n        children: [],\n      };\n\n      const parent = (level > 2) ? lastHeadingOfLevel[level - 1].children : headingTree;\n\n      lastHeadingOfLevel[level] = headingData;\n\n      parent.push(headingData);\n    });\n\n    return headingTree;\n  }\n\n  renderTOC() {\n    const addTOCList = (branch, parent) => {\n      const tocList = document.createElement(\"ol\");\n      tocList.classList.add(\"TOC__list\");\n\n      branch.forEach((headingObject) => {\n        const tocItem = document.createElement(\"li\");\n        tocItem.classList.add(\"TOC__item\");\n\n        const tocLink = document.createElement(\"a\");\n        tocLink.classList.add(\"TOC__link\");\n        tocLink.href = `#${headingObject.id}`;\n        tocLink.textContent = headingObject.text;\n\n        tocItem.appendChild(tocLink);\n        tocList.appendChild(tocItem);\n\n        if(headingObject.children.length > 0 && headingObject.level < this.props.depthLimit) {\n          addTOCList(headingObject.children, tocItem);\n        }\n      });\n\n      parent.appendChild(tocList);\n    };\n\n    addTOCList(this.headingTree, this.element);\n\n    document.body.dispatchEvent(new CustomEvent(\"toc:render\", {}));\n  }\n\n  trackHash() {\n    const hashChangeHandler = () => {\n      const prevCurrentLink = this.element.querySelector(\"[aria-current=true]\");\n      const currentLink = this.element.querySelector(`a[href=\"${window.location.hash}\"]`);\n\n      if(prevCurrentLink) {\n        prevCurrentLink.removeAttribute(\"aria-current\");\n      }\n\n      if(currentLink) {\n        currentLink.setAttribute(\"aria-current\", \"true\");\n      }\n    };\n\n    hashChangeHandler();\n    window.addEventListener(\"hashchange\", hashChangeHandler);\n  }\n}","/**\n * Tabs component.\n *\n * Vocabulary:\n * 1. \"tabs\" or \"tab buttons\": The labeled buttons clicked to activate a panel.\n *    These must have `[role=tab]` and `[aria-controls]` attributes.\n * 2. \"tablist\": The element containing all tabs in a row. This has a\n *    `[role=tablist]`.\n * 3. \"panels\" or \"tabpanels\": The content associated with each tab. These have\n *    a `[role=tabpanel]`.\n *\n * Accessibility and usability requirements:\n * 1. Source order is (all tabs) + (all tabpanels), but tabbing order needs to\n *    be (tab button) -> (associated tabpanel), with sibling tabs focusable via\n *    left and right arrow keys.\n * 2. State is indicated with the `[aria-selected]` attribute on tabs, and the\n *    `[hidden]` attribute on panels.\n * 3. Association between tabs and panels is established via\n *    `[aria-controls=panel id]` on tabs, and `[aria-labelledby=tab id]` on\n *    panels.\n */\nclass Tabs extends Component {\n  constructor(element, props) {\n    super(element, props);\n\n    // Get relevant DOM elements, converting them to normal arrays from\n    // NodeLists so that array methods (like `[].indexOf`) are available.\n    this.tabs = Array.from(this.element.querySelectorAll(\"[role=tab][aria-controls]\"));\n    this.panels = Array.from(this.element.querySelectorAll(\"[role=tabpanel]\"));\n    this.panelsContainer = this.element.querySelector(\"[data-component-part=tabpanels]\");\n    \n    // Set the first tab to active (as long as the `hideAll` prop is not `true`;\n    // otherwise, set active tab to `null` so that no tabs are active).\n    this.state.activeTab = (this.props.hideAll !== true) ? this.tabs[0] : null;\n\n    // Define a key map for what to do when certain keys are pressed while\n    // keyboard focus is on a tab.\n    const keymap = {\n      // Go to (and focus on) next tab on right arrow key press.\n      \"ArrowRight\": () => {\n        this.state.activeTab = this.getNextTab();\n        this.state.activeTab.focus();\n      },\n      // Go to (and focus on) previous tab on left arrow key press.\n      \"ArrowLeft\": () => {\n        this.state.activeTab = this.getPreviousTab();\n        this.state.activeTab.focus();\n      },\n    };\n\n    // Set up event listeners.\n    this.tabs.forEach((tab) => {\n      // Activate tab when clicked.\n      tab.addEventListener(\"click\", () => {\n        this.state.activeTab = tab;\n      });\n\n      // Listen for navigation arrows when a tab button is focused.\n      tab.addEventListener(\"keydown\", (key) => {\n        // If the key code for the triggered event has a match in the key map,\n        // call its associated function.\n        keymap[key.code] && keymap[key.code]();\n      });\n    });\n  }\n\n  // Update DOM after state change.\n  sync(newState) {\n    if(\"activeTab\" in newState) {\n      this.tabs.forEach((tab) => {\n        // Indicate ARIA \"selected\" state according to whether the current tab\n        // in the loop is the active tab.\n        tab.setAttribute(\"aria-selected\", (tab === this.state.activeTab));\n\n        // Because each tab is accessible via arrow key, we want all inactive\n        // tabs to not be accessible via the Tab key, instead making the tab's\n        // asssociated content next in the tabbing order. If the current tab is\n        // the active tab (or if there is no active tab), then we'll keep\n        // keyboard accessibility via the Tab key by setting its tabindex to 0.\n        tab.setAttribute(\"tabindex\", (tab === this.state.activeTab || !this.state.activeTab) ? \"0\" : \"-1\");\n      });\n\n      this.panels.forEach((panel) => {\n        // Hide panel if it is not the active panel (and vice versa).\n        panel.hidden = !(panel === this.getPanelByTab(this.state.activeTab));\n      });\n\n      // Fire a noop scroll event to trigger lazy-loading if it exists.\n      window.dispatchEvent(new Event(\"scroll\"));\n    }\n  }\n\n  /** Utilities */\n\n  /**\n   * Get the next tab after the given one.\n   *\n   * @param {HTMLElement} [relativeTab=this.state.activeTab] - The tab relative\n   * to which you want to get the next tab (defaults to the currently active\n   * tab).\n   * @returns {HTMLElement} - A tab.\n   */\n  getNextTab(relativeTab = this.state.activeTab) {\n    // If the given tab is the last in the order...\n    return (relativeTab === this.tabs[this.tabs.length - 1])\n      // Return the first tab.\n      ? this.tabs[0]\n      // Otherwise, return the tab one index ahead of the given one.\n      : this.tabs[this.tabs.indexOf(relativeTab) + 1];\n  }\n\n  /**\n   * Get the previous tab before the given one.\n   *\n   * @param {HTMLElement} [relativeTab=this.state.activeTab] - The tab relative\n   * to which you want to get the previous tab (defaults to the currently active\n   * tab).\n   * @returns {HTMLElement} - A tab.\n   */\n  getPreviousTab(relativeTab = this.state.activeTab) {\n    // If the given tab is the first in the order...\n    return (relativeTab === this.tabs[0])\n      // Return the last tab.\n      ? this.tabs[this.tabs.length - 1]\n      // Otherwise, return the tab one index behind the given one.\n      : this.tabs[this.tabs.indexOf(relativeTab) - 1];\n  }\n\n  /**\n   * Get the panel controlled by the given tab.\n   *\n   * @param {HTMLElement} tab - The tab for which you want to get the associated\n   * panel.\n   * @returns {HTMLElement} - A panel.\n   */\n  getPanelByTab(tab) {\n    // Check whether the passed `tab` argument is an actual tab (an HTML element\n    // with a `[role=tab]`).\n    return (tab instanceof HTMLElement && tab.getAttribute(\"role\") === \"tab\")\n      // If so, return the panel with an ID matching the `[aria-controls]`\n      // attribute of the tab.\n      ? this.panels.find(panel => tab.getAttribute(\"aria-controls\") === panel.id)\n      // Otherwise, return `null`.\n      : null;\n  }\n}\n\ndocument.querySelectorAll(\"[data-component=Tabs]\").forEach((tabs) => {\n  new Tabs(tabs, {\n    hideAll: tabs.classList.contains(\"Tabs--hide-all\"),\n  });\n});","/**\n * @todo Get intersection observer working (commented out).\n * @todo Get swiping + slide animation working (will need to be on Tabs' end).\n * @todo Get expand/collapse working.\n * @todo Flesh out play/pause button (icon's + aria-label + title instead of textContent).\n * @todo Final carousel styling.\n */\n\nclass Carousel extends Tabs {\n  constructor(element, props) {\n    super(element, props);\n\n    this.controls = {\n      next: this.element.querySelector(\"[data-action=next]\"),\n      previous: this.element.querySelector(\"[data-action=previous]\"),\n      playpause: this.element.querySelector(\"[data-action=play-pause]\"),\n    };\n\n    // Set initial play state based on autoplay prop.\n    this.state.playing = this.props.autoplay === \"true\";\n\n    // Go to next tab and pause on next button click.\n    this.controls.next.addEventListener(\"click\", () => {\n      this.state.activeTab = this.getNextTab();\n      this.state.playing = false;\n    });\n    \n    // Go to previous tab and pause on previous button click.\n    this.controls.previous.addEventListener(\"click\", () => {\n      this.state.activeTab = this.getPreviousTab();\n      this.state.playing = false;\n    });\n\n    // Toggle play state on play/pause button click.\n    this.controls.playpause.addEventListener(\"click\", () => {\n      this.state.playing = !this.state.playing;\n    });\n\n    this.tabs.forEach((tab) => {\n      // Pause on tab button click.\n      tab.addEventListener(\"click\", () => {\n        this.state.playing = false;\n      });\n\n      // Pause on tab button key press.\n      tab.addEventListener(\"keydown\", () => {\n        this.state.playing = false;\n      });\n    });\n\n    // If playing, temporarily pause on hover over a slide.\n    this.panelsContainer.addEventListener(\"mouseover\", () => {\n      if(this.state.playing === true) {\n        this.state.playing = false;\n        this.temporaryPause = true;\n      }\n    });\n\n    // Resume playing on leaving hover if pause was temporary.\n    this.panelsContainer.addEventListener(\"mouseout\", () => {\n      if(this.temporaryPause === true) {\n        this.state.playing = true;\n        // Reset temporary flag.\n        this.temporaryPause = null;\n      }\n    });\n\n    // If playing, temporarily pause on keyboard focus inside a slide.\n    this.panelsContainer.addEventListener(\"focusin\", () => {\n      if(this.state.playing === true) {\n        this.state.playing = false;\n        this.temporaryPause = true;\n      }\n    });\n\n    // Resume playing on leaving focus if pause was temporary.\n    this.panelsContainer.addEventListener(\"focusout\", () => {\n      if(this.temporaryPause === true) {\n        this.state.playing = true;\n        // Reset temporary flag.\n        this.temporaryPause = null;\n      }\n    });\n\n    // Set up an intersection observer to pause the carousel when it's out of\n    // view.\n    new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // Resume playing when the carousel comes back into view (but only if\n        // the current paused state is temporary).\n        if(entry.isIntersecting) {\n          if(this.temporaryPause === true) {\n            this.state.playing = true;\n            // Reset temporary flag.\n            this.temporaryPause = null;\n          }\n        } else if(this.state.playing === true) {\n          // Since the current playing state is true and the carousel is no\n          // longer in view, pause the carousel but flag it as temporary. That\n          // way when the user scrolls the carousel back into view, it will\n          // resume.\n          this.state.playing = false;\n          this.temporaryPause = true;\n        }\n      });\n    }).observe(this.element);\n  }\n\n  sync(newState, prevState) {\n    super.sync(newState, prevState);\n\n    if(\"playing\" in newState) {\n      this.controls.playpause.textContent = this.state.playing ? \"Pause\" : \"Play\";\n\n      if(this.state.playing === true) {\n        this.cycle = setInterval(() => {\n          this.state.activeTab = this.getNextTab();\n        }, parseInt(this.props.timing));\n      } else {\n        clearInterval(this.cycle);\n      }\n    }\n  }\n}\n\ndocument.querySelectorAll(\"[data-component=Carousel]\").forEach((instance) => {\n  new Carousel(instance, {\n    timing: instance.getAttribute(\"data-timing\"),\n    autoplay: instance.getAttribute(\"data-autoplay\"),\n  });\n});"]}