{"version":3,"sources":["@tcds/primitives/buttons.css","@tcds/primitives/buttons.scss"],"names":[],"mappings":"AAwIA,cACA,YACA,aACA,cCpIA,OAKE,gBAAA,KAAA,WAAA,KACA,mBAAA,OACA,YACA,KAAA,QACA,OAAA,QDoIF,2BACA,yBACA,0BACA,2BCrIE,oBACE,QAAA,IAAA,KACA,MAAA,QACA,iBAAA,QACA,SAAA,SDwIJ,kCACA,gCACA,iCACA,kCCzII,2BACE,QAAA,GACA,SAAA,SACA,IAAA,EACA,MAAA,EACA,OAAA,EACA,KAAA,EACA,iBAAA,YACA,WAAA,iBAAA,KAAA,YD4IN,wCACA,sCACA,uCACA,wCC5II,iCACE,iBAAA","file":"buttons.css","sourcesContent":["/**\n * Generic mixins.\n */\n/**\n * For visually hiding an element while keeping it accessible to screen readers.\n * This mixin corresponds with the `.visually-hidden` utility class (see\n * _utilities), but can be applied to any element.\n */\n/**\n * A mixin for targeting specific browsers based off of feature or media\n * queries.\n *\n * Except in extreme circumstances, the use of this mixin is NOT recommended.\n * Instead, opt for progressive enhancement with Feature Queries, or some\n * graceful degradation strategy. This mixin is only intended to be used to\n * address specific rendering quirks or known vendor bugs that cannot be\n * addressed any other way. It should not be used to build parallel stylesheets\n * for different browsers.\n *\n * Be warned that many of these browser-sniffing techniques are unstable, as\n * they typically test for the (lack of) support of certain features that may\n * end up becoming supported in the future. In this event, the queries should be\n * changed to include the version supported, e.g. from \"safari\" to \"lte safari\n * 15\" (less-than or equal-to Safari 15).\n *\n * If this happens, conditional styles should be reassessed. If a feature\n * becomes supported in a new version of a browser, detecting that browser at\n * all may no longer be necessary. If it is still necessary, a different browser\n * detection technique will need to be added under the original query.\n *\n * Also note that in most cases, browser targeting is done with the `@supports`\n * query, which is not supported in any version of IE, Edge < 12, Firefox <= 21,\n * Chrome <= 27, Safari <= 8, or iOS Safari <= 8.4. IE 11 is detected through\n * separate means. See https://caniuse.com/css-featurequeries.\n *\n * @param {string} $browser - The name of the browser or specific query.\n *   Available options are:\n *   - \"firefox\"\n *   - \"not firefox\"\n *   - \"chromium\" (Chrome, modern Edge, etc.)\n *   - \"not chromium\"\n *   - \"sarari\" or \"any safari\" (macOS and iOS)\n *   - \"ios safari\" or \"mobile safari\"\n *   - \"macos safari\" or \"desktop safari\"\n *   - \"not safari\"\n *   - \"ie 11\" or \"gte ie 10\"\n *   - \"edge not chromium\" or \"edgehtml\" or \"lt edge 79\"\n */\n/**\n * Color dictionary.\n *\n * The following color grades use the CIELUV color model for perceptual\n * uniformity, and were generated using the HSLuv tool. Using the primary red\n * brand color (#da2530) as the starting point, all reds have 11deg hue, and all\n * base colors (grade 300) have 47.6% lightness. Most colors have 87.7%\n * saturation, except for yellow and green due to having a broader saturation\n * range (normalized by eye).\n *\n * The following hues were used to generate the other colors:\n * blue = 250\n * yellow = 78.8\n * green = 135\n * gray = 265.9\n *\n * Tints and shades of each color were generated in increments of roughly\n * 10%-20%, and indexed on a scale of 0 to 500 in increments of 100:\n * 0 = 97.5% (~100%)\n * 100 = 90%\n * 200 = 70%\n * 300: 47.6% (~50%)\n * 400: 30%\n * 500: 10%\n *\n * Any two colors are accessible together if the difference between their grades\n * is 300 or greater.\n */\n/**\n * Interface aliases are keywords used to reference colors according to the role\n * they serve in a user interface.\n */\n/**\n * Theme aliases are keywords used to reference colors according to the role\n * they serve in the theme and brand scheme. Default colors are set here, but\n * they are expected to be overridden on a site-by-site basis according to that\n * site's branding.\n */\n/**\n * Utility functions for the color system.\n */\n/**\n * A getter function for the `$colors` map (see _variables).\n */\n/**\n * A getter function for the `$interface-colors` map (see _variables).\n */\n/**\n * A getter function for the `$theme-colors` map (see _variables).\n */\n/**\n * Utility functions for the layout system.\n */\n/**\n * Animation and transition variables.\n */\n/**\n * Easing and timing variables for animations and transitions.\n *\n * \"Productive\" motion is fast and snappy, and is best used for productive user\n * tasks, or elements that only need subtle animation.\n *\n * \"Expressive\" motion is slower and smoother, and is best used to draw a user's\n * attention to a different portion of the screen from where they clicked or\n * where their focus may be.\n *\n * This map has a corresponding getter function, `animation` (see _functions).\n */\n/**\n * Utility functions for animations and transitions.\n */\n/**\n * A getter function for the `$animation-properties` map (see _variables).\n */\n/**\n * Mixins related to motion (animation or transitions).\n */\n/**\n * A media query for detecting whether a user prefers reduced motion.\n */\n/**\n * A media query for detecting whether the user has not set a motion preference.\n */\n/**\n * Note this file is NOT for styles for the Button component, but instead for\n * global styles of generic button elements.\n */\nbutton,\n[type=button],\n[type=file],\n[type=reset],\n[type=submit] {\n  appearance: none;\n  -webkit-appearance: button;\n  border: none;\n  font: inherit;\n  cursor: pointer;\n}\nbutton:not([class]),\n[type=button]:not([class]),\n[type=file]:not([class]),\n[type=reset]:not([class]),\n[type=submit]:not([class]) {\n  padding: 8px 16px;\n  color: #464652;\n  background-color: #e2e2e7;\n  position: relative;\n}\nbutton:not([class])::after,\n[type=button]:not([class])::after,\n[type=file]:not([class])::after,\n[type=reset]:not([class])::after,\n[type=submit]:not([class])::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: transparent;\n  transition: background-color 0.15s ease-in-out;\n}\nbutton:not([class]):hover::after,\n[type=button]:not([class]):hover::after,\n[type=file]:not([class]):hover::after,\n[type=reset]:not([class]):hover::after,\n[type=submit]:not([class]):hover::after {\n  background-color: rgba(0, 0, 0, 0.03);\n}","@use \"../_all\" as *;\n\n/**\n * Note this file is NOT for styles for the Button component, but instead for\n * global styles of generic button elements.\n */\n\nbutton,\n[type=button],\n[type=file],\n[type=reset],\n[type=submit] {\n  appearance: none;\n  -webkit-appearance: button; // Needed for Safari.\n  border: none;\n  font: inherit;\n  cursor: pointer;\n\n  &:not([class]) {\n    padding: space(\"tight\") space(\"normal\");\n    color: color(\"gray\", \"400\");\n    background-color: color(\"gray\", \"100\");\n    position: relative;\n\n    &::after {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      background-color: transparent;\n      transition: background-color animation(\"productive\");\n    }\n\n    &:hover::after {\n      background-color: color(\"shade\", \"0\");\n    }\n  }\n}"]}